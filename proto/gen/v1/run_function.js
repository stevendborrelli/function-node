// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: v1/run_function.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Duration } from "../google/protobuf/duration.js";
import { Struct } from "../google/protobuf/struct.js";
export const protobufPackage = "apiextensions.fn.proto.v1";
/** Ready indicates whether a composed resource should be considered ready. */
export var Ready;
(function (Ready) {
    Ready[Ready["READY_UNSPECIFIED"] = 0] = "READY_UNSPECIFIED";
    /** READY_TRUE - True means the composed resource has been observed to be ready. */
    Ready[Ready["READY_TRUE"] = 1] = "READY_TRUE";
    /** READY_FALSE - False means the composed resource has not been observed to be ready. */
    Ready[Ready["READY_FALSE"] = 2] = "READY_FALSE";
    Ready[Ready["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(Ready || (Ready = {}));
export function readyFromJSON(object) {
    switch (object) {
        case 0:
        case "READY_UNSPECIFIED":
            return Ready.READY_UNSPECIFIED;
        case 1:
        case "READY_TRUE":
            return Ready.READY_TRUE;
        case 2:
        case "READY_FALSE":
            return Ready.READY_FALSE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return Ready.UNRECOGNIZED;
    }
}
export function readyToJSON(object) {
    switch (object) {
        case Ready.READY_UNSPECIFIED:
            return "READY_UNSPECIFIED";
        case Ready.READY_TRUE:
            return "READY_TRUE";
        case Ready.READY_FALSE:
            return "READY_FALSE";
        case Ready.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
/** Severity of Function results. */
export var Severity;
(function (Severity) {
    Severity[Severity["SEVERITY_UNSPECIFIED"] = 0] = "SEVERITY_UNSPECIFIED";
    /**
     * SEVERITY_FATAL - Fatal results are fatal; subsequent Composition Functions may run, but
     * the Composition Function pipeline run will be considered a failure and
     * the first fatal result will be returned as an error.
     */
    Severity[Severity["SEVERITY_FATAL"] = 1] = "SEVERITY_FATAL";
    /**
     * SEVERITY_WARNING - Warning results are non-fatal; the entire Composition will run to
     * completion but warning events and debug logs associated with the
     * composite resource will be emitted.
     */
    Severity[Severity["SEVERITY_WARNING"] = 2] = "SEVERITY_WARNING";
    /**
     * SEVERITY_NORMAL - Normal results are emitted as normal events and debug logs associated
     * with the composite resource.
     */
    Severity[Severity["SEVERITY_NORMAL"] = 3] = "SEVERITY_NORMAL";
    Severity[Severity["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(Severity || (Severity = {}));
export function severityFromJSON(object) {
    switch (object) {
        case 0:
        case "SEVERITY_UNSPECIFIED":
            return Severity.SEVERITY_UNSPECIFIED;
        case 1:
        case "SEVERITY_FATAL":
            return Severity.SEVERITY_FATAL;
        case 2:
        case "SEVERITY_WARNING":
            return Severity.SEVERITY_WARNING;
        case 3:
        case "SEVERITY_NORMAL":
            return Severity.SEVERITY_NORMAL;
        case -1:
        case "UNRECOGNIZED":
        default:
            return Severity.UNRECOGNIZED;
    }
}
export function severityToJSON(object) {
    switch (object) {
        case Severity.SEVERITY_UNSPECIFIED:
            return "SEVERITY_UNSPECIFIED";
        case Severity.SEVERITY_FATAL:
            return "SEVERITY_FATAL";
        case Severity.SEVERITY_WARNING:
            return "SEVERITY_WARNING";
        case Severity.SEVERITY_NORMAL:
            return "SEVERITY_NORMAL";
        case Severity.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
/** Target of Function results and conditions. */
export var Target;
(function (Target) {
    /** TARGET_UNSPECIFIED - If the target is unspecified, the result targets the composite resource. */
    Target[Target["TARGET_UNSPECIFIED"] = 0] = "TARGET_UNSPECIFIED";
    /**
     * TARGET_COMPOSITE - Target the composite resource. Results that target the composite resource
     * should include detailed, advanced information.
     */
    Target[Target["TARGET_COMPOSITE"] = 1] = "TARGET_COMPOSITE";
    /**
     * TARGET_COMPOSITE_AND_CLAIM - Target the composite and the claim. Results that target the composite and
     * the claim should include only end-user friendly information.
     */
    Target[Target["TARGET_COMPOSITE_AND_CLAIM"] = 2] = "TARGET_COMPOSITE_AND_CLAIM";
    Target[Target["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(Target || (Target = {}));
export function targetFromJSON(object) {
    switch (object) {
        case 0:
        case "TARGET_UNSPECIFIED":
            return Target.TARGET_UNSPECIFIED;
        case 1:
        case "TARGET_COMPOSITE":
            return Target.TARGET_COMPOSITE;
        case 2:
        case "TARGET_COMPOSITE_AND_CLAIM":
            return Target.TARGET_COMPOSITE_AND_CLAIM;
        case -1:
        case "UNRECOGNIZED":
        default:
            return Target.UNRECOGNIZED;
    }
}
export function targetToJSON(object) {
    switch (object) {
        case Target.TARGET_UNSPECIFIED:
            return "TARGET_UNSPECIFIED";
        case Target.TARGET_COMPOSITE:
            return "TARGET_COMPOSITE";
        case Target.TARGET_COMPOSITE_AND_CLAIM:
            return "TARGET_COMPOSITE_AND_CLAIM";
        case Target.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
export var Status;
(function (Status) {
    Status[Status["STATUS_CONDITION_UNSPECIFIED"] = 0] = "STATUS_CONDITION_UNSPECIFIED";
    Status[Status["STATUS_CONDITION_UNKNOWN"] = 1] = "STATUS_CONDITION_UNKNOWN";
    Status[Status["STATUS_CONDITION_TRUE"] = 2] = "STATUS_CONDITION_TRUE";
    Status[Status["STATUS_CONDITION_FALSE"] = 3] = "STATUS_CONDITION_FALSE";
    Status[Status["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(Status || (Status = {}));
export function statusFromJSON(object) {
    switch (object) {
        case 0:
        case "STATUS_CONDITION_UNSPECIFIED":
            return Status.STATUS_CONDITION_UNSPECIFIED;
        case 1:
        case "STATUS_CONDITION_UNKNOWN":
            return Status.STATUS_CONDITION_UNKNOWN;
        case 2:
        case "STATUS_CONDITION_TRUE":
            return Status.STATUS_CONDITION_TRUE;
        case 3:
        case "STATUS_CONDITION_FALSE":
            return Status.STATUS_CONDITION_FALSE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return Status.UNRECOGNIZED;
    }
}
export function statusToJSON(object) {
    switch (object) {
        case Status.STATUS_CONDITION_UNSPECIFIED:
            return "STATUS_CONDITION_UNSPECIFIED";
        case Status.STATUS_CONDITION_UNKNOWN:
            return "STATUS_CONDITION_UNKNOWN";
        case Status.STATUS_CONDITION_TRUE:
            return "STATUS_CONDITION_TRUE";
        case Status.STATUS_CONDITION_FALSE:
            return "STATUS_CONDITION_FALSE";
        case Status.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBaseRunFunctionRequest() {
    return {
        meta: undefined,
        observed: undefined,
        desired: undefined,
        input: undefined,
        context: undefined,
        extraResources: {},
        credentials: {},
    };
}
export const RunFunctionRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.meta !== undefined) {
            RequestMeta.encode(message.meta, writer.uint32(10).fork()).join();
        }
        if (message.observed !== undefined) {
            State.encode(message.observed, writer.uint32(18).fork()).join();
        }
        if (message.desired !== undefined) {
            State.encode(message.desired, writer.uint32(26).fork()).join();
        }
        if (message.input !== undefined) {
            Struct.encode(Struct.wrap(message.input), writer.uint32(34).fork()).join();
        }
        if (message.context !== undefined) {
            Struct.encode(Struct.wrap(message.context), writer.uint32(42).fork()).join();
        }
        Object.entries(message.extraResources || {}).forEach(([key, value]) => {
            RunFunctionRequest_ExtraResourcesEntry.encode({ key: key, value }, writer.uint32(50).fork()).join();
        });
        Object.entries(message.credentials || {}).forEach(([key, value]) => {
            RunFunctionRequest_CredentialsEntry.encode({ key: key, value }, writer.uint32(58).fork()).join();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRunFunctionRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.meta = RequestMeta.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.observed = State.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.desired = State.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.input = Struct.unwrap(Struct.decode(reader, reader.uint32()));
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.context = Struct.unwrap(Struct.decode(reader, reader.uint32()));
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    const entry6 = RunFunctionRequest_ExtraResourcesEntry.decode(reader, reader.uint32());
                    if (entry6.value !== undefined) {
                        message.extraResources[entry6.key] = entry6.value;
                    }
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    const entry7 = RunFunctionRequest_CredentialsEntry.decode(reader, reader.uint32());
                    if (entry7.value !== undefined) {
                        message.credentials[entry7.key] = entry7.value;
                    }
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            meta: isSet(object.meta) ? RequestMeta.fromJSON(object.meta) : undefined,
            observed: isSet(object.observed) ? State.fromJSON(object.observed) : undefined,
            desired: isSet(object.desired) ? State.fromJSON(object.desired) : undefined,
            input: isObject(object.input) ? object.input : undefined,
            context: isObject(object.context) ? object.context : undefined,
            extraResources: isObject(object.extraResources)
                ? Object.entries(object.extraResources).reduce((acc, [key, value]) => {
                    acc[key] = Resources.fromJSON(value);
                    return acc;
                }, {})
                : {},
            credentials: isObject(object.credentials)
                ? Object.entries(object.credentials).reduce((acc, [key, value]) => {
                    acc[key] = Credentials.fromJSON(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.meta !== undefined) {
            obj.meta = RequestMeta.toJSON(message.meta);
        }
        if (message.observed !== undefined) {
            obj.observed = State.toJSON(message.observed);
        }
        if (message.desired !== undefined) {
            obj.desired = State.toJSON(message.desired);
        }
        if (message.input !== undefined) {
            obj.input = message.input;
        }
        if (message.context !== undefined) {
            obj.context = message.context;
        }
        if (message.extraResources) {
            const entries = Object.entries(message.extraResources);
            if (entries.length > 0) {
                obj.extraResources = {};
                entries.forEach(([k, v]) => {
                    obj.extraResources[k] = Resources.toJSON(v);
                });
            }
        }
        if (message.credentials) {
            const entries = Object.entries(message.credentials);
            if (entries.length > 0) {
                obj.credentials = {};
                entries.forEach(([k, v]) => {
                    obj.credentials[k] = Credentials.toJSON(v);
                });
            }
        }
        return obj;
    },
    create(base) {
        return RunFunctionRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRunFunctionRequest();
        message.meta = (object.meta !== undefined && object.meta !== null)
            ? RequestMeta.fromPartial(object.meta)
            : undefined;
        message.observed = (object.observed !== undefined && object.observed !== null)
            ? State.fromPartial(object.observed)
            : undefined;
        message.desired = (object.desired !== undefined && object.desired !== null)
            ? State.fromPartial(object.desired)
            : undefined;
        message.input = object.input ?? undefined;
        message.context = object.context ?? undefined;
        message.extraResources = Object.entries(object.extraResources ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = Resources.fromPartial(value);
            }
            return acc;
        }, {});
        message.credentials = Object.entries(object.credentials ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = Credentials.fromPartial(value);
            }
            return acc;
        }, {});
        return message;
    },
};
function createBaseRunFunctionRequest_ExtraResourcesEntry() {
    return { key: "", value: undefined };
}
export const RunFunctionRequest_ExtraResourcesEntry = {
    encode(message, writer = new BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            Resources.encode(message.value, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRunFunctionRequest_ExtraResourcesEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = Resources.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? Resources.fromJSON(object.value) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== undefined) {
            obj.value = Resources.toJSON(message.value);
        }
        return obj;
    },
    create(base) {
        return RunFunctionRequest_ExtraResourcesEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRunFunctionRequest_ExtraResourcesEntry();
        message.key = object.key ?? "";
        message.value = (object.value !== undefined && object.value !== null)
            ? Resources.fromPartial(object.value)
            : undefined;
        return message;
    },
};
function createBaseRunFunctionRequest_CredentialsEntry() {
    return { key: "", value: undefined };
}
export const RunFunctionRequest_CredentialsEntry = {
    encode(message, writer = new BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            Credentials.encode(message.value, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRunFunctionRequest_CredentialsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = Credentials.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? Credentials.fromJSON(object.value) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== undefined) {
            obj.value = Credentials.toJSON(message.value);
        }
        return obj;
    },
    create(base) {
        return RunFunctionRequest_CredentialsEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRunFunctionRequest_CredentialsEntry();
        message.key = object.key ?? "";
        message.value = (object.value !== undefined && object.value !== null)
            ? Credentials.fromPartial(object.value)
            : undefined;
        return message;
    },
};
function createBaseCredentials() {
    return { credentialData: undefined };
}
export const Credentials = {
    encode(message, writer = new BinaryWriter()) {
        if (message.credentialData !== undefined) {
            CredentialData.encode(message.credentialData, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCredentials();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.credentialData = CredentialData.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            credentialData: isSet(object.credentialData) ? CredentialData.fromJSON(object.credentialData) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.credentialData !== undefined) {
            obj.credentialData = CredentialData.toJSON(message.credentialData);
        }
        return obj;
    },
    create(base) {
        return Credentials.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCredentials();
        message.credentialData = (object.credentialData !== undefined && object.credentialData !== null)
            ? CredentialData.fromPartial(object.credentialData)
            : undefined;
        return message;
    },
};
function createBaseCredentialData() {
    return { data: {} };
}
export const CredentialData = {
    encode(message, writer = new BinaryWriter()) {
        Object.entries(message.data || {}).forEach(([key, value]) => {
            CredentialData_DataEntry.encode({ key: key, value }, writer.uint32(10).fork()).join();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCredentialData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    const entry1 = CredentialData_DataEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.data[entry1.key] = entry1.value;
                    }
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            data: isObject(object.data)
                ? Object.entries(object.data).reduce((acc, [key, value]) => {
                    acc[key] = bytesFromBase64(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.data) {
            const entries = Object.entries(message.data);
            if (entries.length > 0) {
                obj.data = {};
                entries.forEach(([k, v]) => {
                    obj.data[k] = base64FromBytes(v);
                });
            }
        }
        return obj;
    },
    create(base) {
        return CredentialData.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCredentialData();
        message.data = Object.entries(object.data ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = value;
            }
            return acc;
        }, {});
        return message;
    },
};
function createBaseCredentialData_DataEntry() {
    return { key: "", value: new Uint8Array(0) };
}
export const CredentialData_DataEntry = {
    encode(message, writer = new BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value.length !== 0) {
            writer.uint32(18).bytes(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCredentialData_DataEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.bytes();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? bytesFromBase64(object.value) : new Uint8Array(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value.length !== 0) {
            obj.value = base64FromBytes(message.value);
        }
        return obj;
    },
    create(base) {
        return CredentialData_DataEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCredentialData_DataEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? new Uint8Array(0);
        return message;
    },
};
function createBaseResources() {
    return { items: [] };
}
export const Resources = {
    encode(message, writer = new BinaryWriter()) {
        if (message.items !== undefined && message.items.length !== 0) {
            for (const v of message.items) {
                Resource.encode(v, writer.uint32(10).fork()).join();
            }
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResources();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.items.push(Resource.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { items: globalThis.Array.isArray(object?.items) ? object.items.map((e) => Resource.fromJSON(e)) : [] };
    },
    toJSON(message) {
        const obj = {};
        if (message.items?.length) {
            obj.items = message.items.map((e) => Resource.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return Resources.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseResources();
        message.items = object.items?.map((e) => Resource.fromPartial(e)) || [];
        return message;
    },
};
function createBaseRunFunctionResponse() {
    return {
        meta: undefined,
        desired: undefined,
        results: [],
        context: undefined,
        requirements: undefined,
        conditions: [],
    };
}
export const RunFunctionResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.meta !== undefined) {
            ResponseMeta.encode(message.meta, writer.uint32(10).fork()).join();
        }
        if (message.desired !== undefined) {
            State.encode(message.desired, writer.uint32(18).fork()).join();
        }
        if (message.results !== undefined && message.results.length !== 0) {
            for (const v of message.results) {
                Result.encode(v, writer.uint32(26).fork()).join();
            }
        }
        if (message.context !== undefined) {
            Struct.encode(Struct.wrap(message.context), writer.uint32(34).fork()).join();
        }
        if (message.requirements !== undefined) {
            Requirements.encode(message.requirements, writer.uint32(42).fork()).join();
        }
        if (message.conditions !== undefined && message.conditions.length !== 0) {
            for (const v of message.conditions) {
                Condition.encode(v, writer.uint32(50).fork()).join();
            }
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRunFunctionResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.meta = ResponseMeta.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.desired = State.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.results.push(Result.decode(reader, reader.uint32()));
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.context = Struct.unwrap(Struct.decode(reader, reader.uint32()));
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.requirements = Requirements.decode(reader, reader.uint32());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.conditions.push(Condition.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            meta: isSet(object.meta) ? ResponseMeta.fromJSON(object.meta) : undefined,
            desired: isSet(object.desired) ? State.fromJSON(object.desired) : undefined,
            results: globalThis.Array.isArray(object?.results) ? object.results.map((e) => Result.fromJSON(e)) : [],
            context: isObject(object.context) ? object.context : undefined,
            requirements: isSet(object.requirements) ? Requirements.fromJSON(object.requirements) : undefined,
            conditions: globalThis.Array.isArray(object?.conditions)
                ? object.conditions.map((e) => Condition.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.meta !== undefined) {
            obj.meta = ResponseMeta.toJSON(message.meta);
        }
        if (message.desired !== undefined) {
            obj.desired = State.toJSON(message.desired);
        }
        if (message.results?.length) {
            obj.results = message.results.map((e) => Result.toJSON(e));
        }
        if (message.context !== undefined) {
            obj.context = message.context;
        }
        if (message.requirements !== undefined) {
            obj.requirements = Requirements.toJSON(message.requirements);
        }
        if (message.conditions?.length) {
            obj.conditions = message.conditions.map((e) => Condition.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return RunFunctionResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRunFunctionResponse();
        message.meta = (object.meta !== undefined && object.meta !== null)
            ? ResponseMeta.fromPartial(object.meta)
            : undefined;
        message.desired = (object.desired !== undefined && object.desired !== null)
            ? State.fromPartial(object.desired)
            : undefined;
        message.results = object.results?.map((e) => Result.fromPartial(e)) || [];
        message.context = object.context ?? undefined;
        message.requirements = (object.requirements !== undefined && object.requirements !== null)
            ? Requirements.fromPartial(object.requirements)
            : undefined;
        message.conditions = object.conditions?.map((e) => Condition.fromPartial(e)) || [];
        return message;
    },
};
function createBaseRequestMeta() {
    return { tag: "" };
}
export const RequestMeta = {
    encode(message, writer = new BinaryWriter()) {
        if (message.tag !== undefined && message.tag !== "") {
            writer.uint32(10).string(message.tag);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRequestMeta();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.tag = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { tag: isSet(object.tag) ? globalThis.String(object.tag) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.tag !== undefined && message.tag !== "") {
            obj.tag = message.tag;
        }
        return obj;
    },
    create(base) {
        return RequestMeta.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRequestMeta();
        message.tag = object.tag ?? "";
        return message;
    },
};
function createBaseRequirements() {
    return { extraResources: {} };
}
export const Requirements = {
    encode(message, writer = new BinaryWriter()) {
        Object.entries(message.extraResources || {}).forEach(([key, value]) => {
            Requirements_ExtraResourcesEntry.encode({ key: key, value }, writer.uint32(10).fork()).join();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRequirements();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    const entry1 = Requirements_ExtraResourcesEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.extraResources[entry1.key] = entry1.value;
                    }
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            extraResources: isObject(object.extraResources)
                ? Object.entries(object.extraResources).reduce((acc, [key, value]) => {
                    acc[key] = ResourceSelector.fromJSON(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.extraResources) {
            const entries = Object.entries(message.extraResources);
            if (entries.length > 0) {
                obj.extraResources = {};
                entries.forEach(([k, v]) => {
                    obj.extraResources[k] = ResourceSelector.toJSON(v);
                });
            }
        }
        return obj;
    },
    create(base) {
        return Requirements.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRequirements();
        message.extraResources = Object.entries(object.extraResources ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = ResourceSelector.fromPartial(value);
            }
            return acc;
        }, {});
        return message;
    },
};
function createBaseRequirements_ExtraResourcesEntry() {
    return { key: "", value: undefined };
}
export const Requirements_ExtraResourcesEntry = {
    encode(message, writer = new BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            ResourceSelector.encode(message.value, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRequirements_ExtraResourcesEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = ResourceSelector.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? ResourceSelector.fromJSON(object.value) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== undefined) {
            obj.value = ResourceSelector.toJSON(message.value);
        }
        return obj;
    },
    create(base) {
        return Requirements_ExtraResourcesEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRequirements_ExtraResourcesEntry();
        message.key = object.key ?? "";
        message.value = (object.value !== undefined && object.value !== null)
            ? ResourceSelector.fromPartial(object.value)
            : undefined;
        return message;
    },
};
function createBaseResourceSelector() {
    return { apiVersion: "", kind: "", matchName: undefined, matchLabels: undefined };
}
export const ResourceSelector = {
    encode(message, writer = new BinaryWriter()) {
        if (message.apiVersion !== undefined && message.apiVersion !== "") {
            writer.uint32(10).string(message.apiVersion);
        }
        if (message.kind !== undefined && message.kind !== "") {
            writer.uint32(18).string(message.kind);
        }
        if (message.matchName !== undefined) {
            writer.uint32(26).string(message.matchName);
        }
        if (message.matchLabels !== undefined) {
            MatchLabels.encode(message.matchLabels, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResourceSelector();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.apiVersion = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.kind = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.matchName = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.matchLabels = MatchLabels.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            apiVersion: isSet(object.apiVersion) ? globalThis.String(object.apiVersion) : "",
            kind: isSet(object.kind) ? globalThis.String(object.kind) : "",
            matchName: isSet(object.matchName) ? globalThis.String(object.matchName) : undefined,
            matchLabels: isSet(object.matchLabels) ? MatchLabels.fromJSON(object.matchLabels) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.apiVersion !== undefined && message.apiVersion !== "") {
            obj.apiVersion = message.apiVersion;
        }
        if (message.kind !== undefined && message.kind !== "") {
            obj.kind = message.kind;
        }
        if (message.matchName !== undefined) {
            obj.matchName = message.matchName;
        }
        if (message.matchLabels !== undefined) {
            obj.matchLabels = MatchLabels.toJSON(message.matchLabels);
        }
        return obj;
    },
    create(base) {
        return ResourceSelector.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseResourceSelector();
        message.apiVersion = object.apiVersion ?? "";
        message.kind = object.kind ?? "";
        message.matchName = object.matchName ?? undefined;
        message.matchLabels = (object.matchLabels !== undefined && object.matchLabels !== null)
            ? MatchLabels.fromPartial(object.matchLabels)
            : undefined;
        return message;
    },
};
function createBaseMatchLabels() {
    return { labels: {} };
}
export const MatchLabels = {
    encode(message, writer = new BinaryWriter()) {
        Object.entries(message.labels || {}).forEach(([key, value]) => {
            MatchLabels_LabelsEntry.encode({ key: key, value }, writer.uint32(10).fork()).join();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMatchLabels();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    const entry1 = MatchLabels_LabelsEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.labels[entry1.key] = entry1.value;
                    }
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            labels: isObject(object.labels)
                ? Object.entries(object.labels).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.labels) {
            const entries = Object.entries(message.labels);
            if (entries.length > 0) {
                obj.labels = {};
                entries.forEach(([k, v]) => {
                    obj.labels[k] = v;
                });
            }
        }
        return obj;
    },
    create(base) {
        return MatchLabels.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMatchLabels();
        message.labels = Object.entries(object.labels ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.String(value);
            }
            return acc;
        }, {});
        return message;
    },
};
function createBaseMatchLabels_LabelsEntry() {
    return { key: "", value: "" };
}
export const MatchLabels_LabelsEntry = {
    encode(message, writer = new BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMatchLabels_LabelsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return MatchLabels_LabelsEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMatchLabels_LabelsEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? "";
        return message;
    },
};
function createBaseResponseMeta() {
    return { tag: "", ttl: undefined };
}
export const ResponseMeta = {
    encode(message, writer = new BinaryWriter()) {
        if (message.tag !== undefined && message.tag !== "") {
            writer.uint32(10).string(message.tag);
        }
        if (message.ttl !== undefined) {
            Duration.encode(message.ttl, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResponseMeta();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.tag = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.ttl = Duration.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            tag: isSet(object.tag) ? globalThis.String(object.tag) : "",
            ttl: isSet(object.ttl) ? Duration.fromJSON(object.ttl) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.tag !== undefined && message.tag !== "") {
            obj.tag = message.tag;
        }
        if (message.ttl !== undefined) {
            obj.ttl = Duration.toJSON(message.ttl);
        }
        return obj;
    },
    create(base) {
        return ResponseMeta.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseResponseMeta();
        message.tag = object.tag ?? "";
        message.ttl = (object.ttl !== undefined && object.ttl !== null) ? Duration.fromPartial(object.ttl) : undefined;
        return message;
    },
};
function createBaseState() {
    return { composite: undefined, resources: {} };
}
export const State = {
    encode(message, writer = new BinaryWriter()) {
        if (message.composite !== undefined) {
            Resource.encode(message.composite, writer.uint32(10).fork()).join();
        }
        Object.entries(message.resources || {}).forEach(([key, value]) => {
            State_ResourcesEntry.encode({ key: key, value }, writer.uint32(18).fork()).join();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.composite = Resource.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    const entry2 = State_ResourcesEntry.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.resources[entry2.key] = entry2.value;
                    }
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            composite: isSet(object.composite) ? Resource.fromJSON(object.composite) : undefined,
            resources: isObject(object.resources)
                ? Object.entries(object.resources).reduce((acc, [key, value]) => {
                    acc[key] = Resource.fromJSON(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.composite !== undefined) {
            obj.composite = Resource.toJSON(message.composite);
        }
        if (message.resources) {
            const entries = Object.entries(message.resources);
            if (entries.length > 0) {
                obj.resources = {};
                entries.forEach(([k, v]) => {
                    obj.resources[k] = Resource.toJSON(v);
                });
            }
        }
        return obj;
    },
    create(base) {
        return State.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseState();
        message.composite = (object.composite !== undefined && object.composite !== null)
            ? Resource.fromPartial(object.composite)
            : undefined;
        message.resources = Object.entries(object.resources ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = Resource.fromPartial(value);
            }
            return acc;
        }, {});
        return message;
    },
};
function createBaseState_ResourcesEntry() {
    return { key: "", value: undefined };
}
export const State_ResourcesEntry = {
    encode(message, writer = new BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            Resource.encode(message.value, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseState_ResourcesEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = Resource.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? Resource.fromJSON(object.value) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== undefined) {
            obj.value = Resource.toJSON(message.value);
        }
        return obj;
    },
    create(base) {
        return State_ResourcesEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseState_ResourcesEntry();
        message.key = object.key ?? "";
        message.value = (object.value !== undefined && object.value !== null)
            ? Resource.fromPartial(object.value)
            : undefined;
        return message;
    },
};
function createBaseResource() {
    return { resource: undefined, connectionDetails: {}, ready: 0 };
}
export const Resource = {
    encode(message, writer = new BinaryWriter()) {
        if (message.resource !== undefined) {
            Struct.encode(Struct.wrap(message.resource), writer.uint32(10).fork()).join();
        }
        Object.entries(message.connectionDetails || {}).forEach(([key, value]) => {
            Resource_ConnectionDetailsEntry.encode({ key: key, value }, writer.uint32(18).fork()).join();
        });
        if (message.ready !== undefined && message.ready !== 0) {
            writer.uint32(24).int32(message.ready);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResource();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.resource = Struct.unwrap(Struct.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    const entry2 = Resource_ConnectionDetailsEntry.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.connectionDetails[entry2.key] = entry2.value;
                    }
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.ready = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            resource: isObject(object.resource) ? object.resource : undefined,
            connectionDetails: isObject(object.connectionDetails)
                ? Object.entries(object.connectionDetails).reduce((acc, [key, value]) => {
                    acc[key] = bytesFromBase64(value);
                    return acc;
                }, {})
                : {},
            ready: isSet(object.ready) ? readyFromJSON(object.ready) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.resource !== undefined) {
            obj.resource = message.resource;
        }
        if (message.connectionDetails) {
            const entries = Object.entries(message.connectionDetails);
            if (entries.length > 0) {
                obj.connectionDetails = {};
                entries.forEach(([k, v]) => {
                    obj.connectionDetails[k] = base64FromBytes(v);
                });
            }
        }
        if (message.ready !== undefined && message.ready !== 0) {
            obj.ready = readyToJSON(message.ready);
        }
        return obj;
    },
    create(base) {
        return Resource.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseResource();
        message.resource = object.resource ?? undefined;
        message.connectionDetails = Object.entries(object.connectionDetails ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = value;
            }
            return acc;
        }, {});
        message.ready = object.ready ?? 0;
        return message;
    },
};
function createBaseResource_ConnectionDetailsEntry() {
    return { key: "", value: new Uint8Array(0) };
}
export const Resource_ConnectionDetailsEntry = {
    encode(message, writer = new BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value.length !== 0) {
            writer.uint32(18).bytes(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResource_ConnectionDetailsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.bytes();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? bytesFromBase64(object.value) : new Uint8Array(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value.length !== 0) {
            obj.value = base64FromBytes(message.value);
        }
        return obj;
    },
    create(base) {
        return Resource_ConnectionDetailsEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseResource_ConnectionDetailsEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? new Uint8Array(0);
        return message;
    },
};
function createBaseResult() {
    return { severity: 0, message: "", reason: undefined, target: undefined };
}
export const Result = {
    encode(message, writer = new BinaryWriter()) {
        if (message.severity !== undefined && message.severity !== 0) {
            writer.uint32(8).int32(message.severity);
        }
        if (message.message !== undefined && message.message !== "") {
            writer.uint32(18).string(message.message);
        }
        if (message.reason !== undefined) {
            writer.uint32(26).string(message.reason);
        }
        if (message.target !== undefined) {
            writer.uint32(32).int32(message.target);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResult();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.severity = reader.int32();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.reason = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.target = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            severity: isSet(object.severity) ? severityFromJSON(object.severity) : 0,
            message: isSet(object.message) ? globalThis.String(object.message) : "",
            reason: isSet(object.reason) ? globalThis.String(object.reason) : undefined,
            target: isSet(object.target) ? targetFromJSON(object.target) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.severity !== undefined && message.severity !== 0) {
            obj.severity = severityToJSON(message.severity);
        }
        if (message.message !== undefined && message.message !== "") {
            obj.message = message.message;
        }
        if (message.reason !== undefined) {
            obj.reason = message.reason;
        }
        if (message.target !== undefined) {
            obj.target = targetToJSON(message.target);
        }
        return obj;
    },
    create(base) {
        return Result.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseResult();
        message.severity = object.severity ?? 0;
        message.message = object.message ?? "";
        message.reason = object.reason ?? undefined;
        message.target = object.target ?? undefined;
        return message;
    },
};
function createBaseCondition() {
    return { type: "", status: 0, reason: "", message: undefined, target: undefined };
}
export const Condition = {
    encode(message, writer = new BinaryWriter()) {
        if (message.type !== undefined && message.type !== "") {
            writer.uint32(10).string(message.type);
        }
        if (message.status !== undefined && message.status !== 0) {
            writer.uint32(16).int32(message.status);
        }
        if (message.reason !== undefined && message.reason !== "") {
            writer.uint32(26).string(message.reason);
        }
        if (message.message !== undefined) {
            writer.uint32(34).string(message.message);
        }
        if (message.target !== undefined) {
            writer.uint32(40).int32(message.target);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCondition();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.type = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.status = reader.int32();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.reason = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.target = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            type: isSet(object.type) ? globalThis.String(object.type) : "",
            status: isSet(object.status) ? statusFromJSON(object.status) : 0,
            reason: isSet(object.reason) ? globalThis.String(object.reason) : "",
            message: isSet(object.message) ? globalThis.String(object.message) : undefined,
            target: isSet(object.target) ? targetFromJSON(object.target) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.type !== undefined && message.type !== "") {
            obj.type = message.type;
        }
        if (message.status !== undefined && message.status !== 0) {
            obj.status = statusToJSON(message.status);
        }
        if (message.reason !== undefined && message.reason !== "") {
            obj.reason = message.reason;
        }
        if (message.message !== undefined) {
            obj.message = message.message;
        }
        if (message.target !== undefined) {
            obj.target = targetToJSON(message.target);
        }
        return obj;
    },
    create(base) {
        return Condition.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCondition();
        message.type = object.type ?? "";
        message.status = object.status ?? 0;
        message.reason = object.reason ?? "";
        message.message = object.message ?? undefined;
        message.target = object.target ?? undefined;
        return message;
    },
};
export const FunctionRunnerServiceDefinition = {
    name: "FunctionRunnerService",
    fullName: "apiextensions.fn.proto.v1.FunctionRunnerService",
    methods: {
        /** RunFunction runs the Composition Function. */
        runFunction: {
            name: "RunFunction",
            requestType: RunFunctionRequest,
            requestStream: false,
            responseType: RunFunctionResponse,
            responseStream: false,
            options: {},
        },
    },
};
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(globalThis.String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
